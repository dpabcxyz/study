1、初始化项目
npm init

2、安装webpack webpack-cli
npm i -d webpack webpack-cli

3、webpack-dev-server配置与安装
npm i -d dev webpack-dev-server

4、html模板插件
npm i -d  html-webpack-plugin

5、运行打包后的文件
npm i -g serve 安装 
serve  运行

6、publicPath
build之后的公共路径
用于配置打包后的项目放在非根目录

7、多页面配置
入口文件：
 entry:{
        index:'./src/index.js', 
        admin:'./src/admin.js',  
    },
chunks 解决独立引用问题

8、css loader  打包css文件
npm i -d  css-loader style-loader mini-css-extract-plugin
css-loader 解析@import语法
style-loader 把css插入到head标签中
mini-css-extract-plugin 抽离css样式 让index.html里面的css样式变成link引入

9、post-css 处理兼容性
npm i -s postcss-loader autoprefixer

10、css压缩
npm i -s optimize-css-assets-webpack-plugin

11、js压缩
npm i -s uglifyjs-webpack-plugin
es6
12、图片资源压缩
npm i -s url-loader

13、babel-loader
@babel/core 核心文件
@babel/preset-env   es6转es5  低级
@babel/plugin-proposal-class-properties   支持es6  class  goods语法
@babel/runtime   编译模块的工具函数
@babel/plugin-transform-runtime  es6转es5时需要一些辅助函数，例如_extend。这些文件多的时候，
项目就会很大。所以babel提供transform-runtime来将这些辅助函数 “搬”到一个独立的模块  babel-runtime 中
这样就能减少项目文件的大小。
